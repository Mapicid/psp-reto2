// ejemplo4_crudUsuarios_validado.js
const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());

// Datos en memoria (no persistente)
let usuarios = [
  // { id: 1, nombre: "Ada", email: "ada@lovelace.io", edad: 28 }
];

// Utilidades
const nextId = () =>
  usuarios.length ? Math.max(...usuarios.map(u => u.id)) + 1 : 1;

const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

// Middlewares de validación
function validarIdParam(req, res, next) {
  const id = Number(req.params.id);
  if (!Number.isInteger(id) || id <= 0) {
    return res.status(400).json({ error: 'ID inválido' });
  }
  req.idNum = id;
  next();
}

function validarUsuarioBody(req, res, next) {
  const { nombre, email, edad } = req.body;

  if (nombre === undefined || email === undefined || edad === undefined) {
    return res.status(400).json({ error: 'Faltan datos obligatorios: nombre, email, edad' });
  }
  if (!nombre || typeof nombre !== 'string') {
    return res.status(400).json({ error: 'El nombre no puede estar vacío' });
  }
  if (!emailRegex.test(email)) {
    return res.status(400).json({ error: 'Formato de email inválido' });
  }
  if (typeof edad !== 'number' || Number.isNaN(edad) || edad < 0) {
    return res.status(400).json({ error: 'La edad debe ser un número ≥ 0' });
  }
  next();
}

// Endpoints
app.get('/usuarios', (req, res) => {
  res.json(usuarios);
});

app.get('/usuarios/:id', validarIdParam, (req, res) => {
  const usuario = usuarios.find(u => u.id === req.idNum);
  if (!usuario) return res.status(404).json({ error: 'Usuario no encontrado' });
  res.json(usuario);
});

app.post('/usuarios', validarUsuarioBody, (req, res) => {
  const { nombre, email, edad } = req.body;
  const nuevo = { id: nextId(), nombre, email, edad };
  usuarios.push(nuevo);
  res.status(201).json({ mensaje: 'Usuario creado correctamente', usuario: nuevo });
});

app.put('/usuarios/:id', validarIdParam, validarUsuarioBody, (req, res) => {
  const idx = usuarios.findIndex(u => u.id === req.idNum);
  if (idx === -1) return res.status(404).json({ error: 'Usuario no encontrado' });

  const { nombre, email, edad } = req.body;
  usuarios[idx] = { id: req.idNum, nombre, email, edad };
  res.json({ mensaje: 'Usuario actualizado', usuario: usuarios[idx] });
});

app.delete('/usuarios/:id', validarIdParam, (req, res) => {
  const before = usuarios.length;
  usuarios = usuarios.filter(u => u.id !== req.idNum);
  if (usuarios.length === before) {
    return res.status(404).json({ error: 'Usuario no encontrado' });
  }
  res.json({ mensaje: 'Usuario eliminado' });
});

// Arranque
app.listen(PORT, () => {
  console.log(`Servidor en marcha → http://localhost:${PORT}`);
});

